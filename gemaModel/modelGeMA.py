from gemaModel.material.materialGeMA_elastic import materialGema_elastic
from gemaModel.material.materialGeMA_poroElastic import materialGema_poroElastic
from gemaModel.material.materialGeMA_elasticInterface import materialGema_elasticInterface
from gemaModel.material.materialGeMA_poroInterfaceMC import materialGema_poroInterfaceMC
from gemaModel.material.materialGeMA_parametersDescriptions import parameter_descriptions
from gemaModel.material.materialGeMA_parametersUnits import parameter_units

class modelGeMA:
    def __init__(self, _problemName = 'none', _physics = []):
        self.availableStateVariables   = ['u','p','T']
        self.problemName               = _problemName
        self.physics                   = _physics
        self.stateVariables            = self.getStateVariables()
        self.materials                 = []
        self.additionalPropSet         = []
        self.mesh                      = []
        self.cellGroups                = []
        self.boundaryConditions        = []
        self.matParametersDescriptions = parameter_descriptions
        self.matParametersUnits        = parameter_units

    # ---------------------------------------------------------------------
    def getStateVariables(self):
        var = [state_var for sublist in self.physics for state_var in sublist.getPhysicsStateVariables()]
        return list(set(var))

    # ---------------------------------------------------------------------
    def getMaterialParameters(self):
        mat = [param for sublist in self.materials for param in sublist.parametersId]
        return list(set(mat))

    # ---------------------------------------------------------------------
    def addMesh(self,_mesh):
        self.mesh.append(_mesh)

    # --------------------------------------------------------------------- 
    def addMaterial(self,_materialName,_materialData):
        if _materialData['materialType'] == 'elastic':
            mat = materialGema_elastic(_materialName,_materialData)
        elif _materialData['materialType'] == 'poroElastic':
            mat = materialGema_poroElastic(_materialName,_materialData)
        elif _materialData['materialType'] == 'elasticInterface':
            mat = materialGema_elasticInterface(_materialName,_materialData)
        elif _materialData['materialType'] == 'poroInterfaceMC':
            mat = materialGema_poroInterfaceMC(_materialName,_materialData)
        self.materials.append(mat)
        
    # ---------------------------------------------------------------------
    def addBoundaryCondition(self,_boundaryCondition):
        self.boundaryConditions.append(_boundaryCondition)

    # ---------------------------------------------------------------------
    def createCellGroup(self,_cellList,_materialId,_sectionId = []):
        pass

    # ---------------------------------------------------------------------
    def openFile(self):
        fileName = 'gemaFiles\\' + self.problemName + '_model.lua'
        with open(fileName, 'w') as file:
            file.write('------------------ Model generated by gmsh2GeMA conversor - Tecgraf Institute ------------------\n\n')

    # ---------------------------------------------------------------------
    def writeModelFile(self):
        self.openFile()
        self.writeStateVariables()
        self.writeMaterials()
        self.writeAdditionalPropSet()
        self.writeMesh()
        self.writeBoundaryConditions()

    # ---------------------------------------------------------------------
    def writeStateVariables(self):
        fileName = 'gemaFiles\\' + self.problemName + '_model.lua'
        with open(fileName, 'a') as file:
            file.write('-------------------------------------------------------------\n')
            file.write('--  State variables\n')
            file.write('-------------------------------------------------------------\n')
            for var in self.stateVariables:
                if var == 'u':
                    file.write("StateVar{id = 'u', dim = 2, description = 'Displacements in the X and Y directions', unit = 'm',   format = '8.4f', groupName = 'mechanic'}\n")
                elif var == 'p':
                    file.write("StateVar{id = 'p', dim = 1, description = 'Pore pressure degree-of-freedom',         unit = 'kPa', format = '8.4f', groupName = 'hydraulic'}\n")
                elif var == 'T':
                    file.write("StateVar{id = 'T', dim = 1, description = 'Temperature',                             unit = 'K',   format = '8.4f', groupName = 'temperature', defVal = 0.0}\n\n")

    # ---------------------------------------------------------------------
    def writeMaterials(self):
        self.writeMaterialHeader()
        self.writeMaterialProperties()
        self.writeMaterialValues()

    # ---------------------------------------------------------------------
    def writeAdditionalPropSet(self):
        pass

    # ---------------------------------------------------------------------
    def writeMesh(self):
        pass

    # ---------------------------------------------------------------------
    def writeBoundaryConditions(self):
        pass

    # ---------------------------------------------------------------------
    def writeMaterialProperties(self):

        # Get the material parameters of all materials present in the model
        parameters = self.getMaterialParameters()

        # File name with path
        fileName = 'gemaFiles\\' + self.problemName + '_model.lua'

        # Open the file to write the material properties
        with open (fileName,'a') as file:
            file.write('  properties  = {\n')
            for param in parameters:
                matprop = '    {id= ' + param + ', description = \'' + self.matParametersDescriptions[param] + '\',  unit = \'' + self.matParametersUnits[param] + '\'},\n'
                file.write(matprop)
            file.write("  },\n")

    # --------------------------------------------------------------------- 
    def writeMaterialValues(self):

        # File name with path
        fileName = 'gemaFiles\\' + self.problemName + '_model.lua'

        # Open the file to write the material properties
        with open (fileName,'a') as file:
            file.write('  values  = {\n')
            for mat in self.materials:
                file.write("     {")
                for param in mat.parametersId:
                    file.write(f"    {param} = {mat.data[param]:.8e},")
                file.write("  },\n")
            file.write("  }\n")
            file.write("}\n")

    # ---------------------------------------------------------------------
    def writeMaterialHeader(self):
        fileName = 'gemaFiles\\' + self.problemName + '_model.lua'
        with open (fileName,'a') as file:
            file.write('-------------------------------------------------------------\n')
            file.write('--  Cell properties\n')
            file.write('-------------------------------------------------------------\n')
            file.write('PropertySet\n')
            file.write('{\n')
            file.write('  id= \'MatProp\',\n')
            file.write('  typeName  = \'GemaPropertySet\',\n')
            file.write('  description = \'Material properties\',\n')

    