from gemaModel.material.materialGeMA_elastic import materialGema_elastic
from gemaModel.material.materialGeMA_poroElastic import materialGema_poroElastic
from gemaModel.material.materialGeMA_elasticInterface import materialGema_elasticInterface
from gemaModel.material.materialGeMA_poroInterfaceMC import materialGema_poroInterfaceMC
from gemaModel.material.materialGeMA_parametersDescriptions import parameter_descriptions
from gemaModel.material.materialGeMA_parametersUnits import parameter_units
from gemaModel.mesh.gmsh2GeMA_ElementTypes import gmsh2GeMA_elementTypes
from gemaModel.mesh.gema_IntegrationRules import gema_elementIntegrationRules

class modelGeMA:
    def __init__(self, _problemName = 'none', _physics = []):
        self.availableStateVariables   = ['u','p','T']
        self.problemName               = _problemName
        self.physics                   = _physics
        self.stateVariables            = self.getStateVariables()
        self.materials                 = []
        self.materialsId               = {}
        self.numMaterials              = 0
        self.additionalPropSet         = []
        self.mesh                      = []
        self.cellGroups                = []
        self.boundaryConditions        = []
        self.matParametersDescriptions = parameter_descriptions
        self.matParametersUnits        = parameter_units
        self.fileName                  = 'gemaFiles\\' + _problemName + '_model.lua'

    # ---------------------------------------------------------------------
    def getStateVariables(self):
        var = [state_var for sublist in self.physics for state_var in sublist.getPhysicsStateVariables()]
        return list(set(var))

    # ---------------------------------------------------------------------
    def getMaterialParameters(self):
        mat = [param for sublist in self.materials for param in sublist.parametersId]
        return list(set(mat))

    # ---------------------------------------------------------------------
    def setMesh(self,_mesh):
        self.mesh = _mesh

    # --------------------------------------------------------------------- 
    def addMaterial(self,_materialName,_materialData):
        if _materialData['materialType'] == 'elastic':
            mat = materialGema_elastic(_materialName,_materialData)
        elif _materialData['materialType'] == 'poroElastic':
            mat = materialGema_poroElastic(_materialName,_materialData)
        elif _materialData['materialType'] == 'elasticInterface':
            mat = materialGema_elasticInterface(_materialName,_materialData)
        elif _materialData['materialType'] == 'poroInterfaceMC':
            mat = materialGema_poroInterfaceMC(_materialName,_materialData)
        self.numMaterials += 1
        self.materials.append(mat)
        self.materialsId[_materialName] = self.numMaterials
        
    # ---------------------------------------------------------------------
    def addBoundaryCondition(self,_boundaryCondition):
        self.boundaryConditions.append(_boundaryCondition)

    # ---------------------------------------------------------------------
    def openFile(self):
        with open(self.fileName, 'w') as file:
            file.write('------------------ Model generated by gmsh2GeMA conversor - Tecgraf Institute ------------------\n\n')

    # ---------------------------------------------------------------------
    def writeModelFile(self):
        self.openFile()
        self.writeStateVariables()
        self.writeMaterials()
        self.writeAdditionalPropSet()
        self.writeMesh()
        self.writeBoundaryConditions()

    # ---------------------------------------------------------------------
    def writeStateVariables(self):
        with open(self.fileName, 'a') as file:
            file.write('-------------------------------------------------------------\n')
            file.write('--  State variables\n')
            file.write('-------------------------------------------------------------\n')
            for var in self.stateVariables:
                if var == 'u':
                    file.write("StateVar{id = 'u', dim = 2, description = 'Displacements in the X and Y directions', unit = 'm',   format = '8.4f', groupName = 'mechanic'}\n")
                elif var == 'P':
                    file.write("StateVar{id = 'P', dim = 1, description = 'Pore pressure degree-of-freedom',         unit = 'kPa', format = '8.4f', groupName = 'hydraulic'}\n")
                elif var == 'T':
                    file.write("StateVar{id = 'T', dim = 1, description = 'Temperature',                             unit = 'K',   format = '8.4f', groupName = 'temperature', defVal = 0.0}\n\n")

    # ---------------------------------------------------------------------
    def writeMaterials(self):
        self.writeMaterialHeader()
        self.writeMaterialProperties()
        self.writeMaterialValues()

    # ---------------------------------------------------------------------
    def writeAdditionalPropSet(self):
        pass

    # ---------------------------------------------------------------------
    def writeMesh(self):
        self.writeMeshHeader()
        self.writeLoadMeshFile()
        self.writeMeshElements()
        self.writeMeshDefinition()

    # ---------------------------------------------------------------------
    def writeBoundaryConditions(self):
        pass

    # ---------------------------------------------------------------------
    def writeMeshHeader(self):
        with open (self.fileName,'a') as file:
            file.write("\n-------------------------------------------------------------\n")
            file.write("--  Mesh definition\n")
            file.write("-------------------------------------------------------------\n\n")

    # ---------------------------------------------------------------------
    def writeLoadMeshFile(self):
        with open (self.fileName,'a') as file:
            file.write("meshInfo = dofile('$SIMULATIONDIR/$SIMULATIONNAME_mesh.lua')\n\n")

    # ---------------------------------------------------------------------
    def writeMeshElements(self):

        with open(self.fileName, 'a') as file:

            file.write('local mesh_elements = {\n')

            for physicalGroupTag in self.mesh.cellPhysicalGroups:

                # Get the name of the physical group
                physicalGroupName = self.mesh.gmsh.model.getPhysicalName(self.mesh.dim, physicalGroupTag)

                # Get the entities tags associated with this physical group
                entitiesTags = self.mesh.gmsh.model.getEntitiesForPhysicalGroup(self.mesh.dim,physicalGroupTag)

                # Get the element types present in the physical group with the specified dimension
                elemTypes = []
                for entityTag in entitiesTags:
                    entityElemTypes = self.mesh.gmsh.model.mesh.getElementTypes(self.mesh.dim, entityTag)
                    elemTypes.extend(entityElemTypes)
                elemTypes = list(set(elemTypes))

                # Print the elements of the specified element type 
                for elemType in elemTypes:
                    gemaElement = gmsh2GeMA_elementTypes[elemType]
                    file.write('\t\t{')
                    file.write(f' cellType  = \'{gemaElement}\', ')
                    file.write(f' cellGroup = \'{physicalGroupName}_{gemaElement}\', ')
                    file.write(f' cellList  = meshInfo.{gemaElement}_{physicalGroupName}, ')
                    file.write(f' MatProp   = \'{self.materialsId[physicalGroupName]}\' ')
                    if self.mesh.dim == 2:
                        file.write(f', SecProp   = 1 ')
                    file.write('},\n')

            if self.mesh.hasDiscontinuitySet:    #TODO: generalize to other types of interface elements + XFEM
                # Get the name of the physical group
                physicalGroupName = self.mesh.gmsh.model.getPhysicalName(1, self.mesh.discontinuitySetPhysicalGroup)
                # Print the interface element data
                file.write('\t\t{')
                file.write(f' cellType  = \'int2dl4\', ')                   
                file.write(f' cellGroup = \'{physicalGroupName}_int2dl4\', ')
                file.write(f' cellList  = meshInfo.int2dl4_{physicalGroupName}, ')
                file.write(f' MatProp   = \'{self.materialsId[physicalGroupName]}\' ')
                if self.mesh.dim == 2:
                    file.write(f', SecProp   = 1 ')
                file.write('},\n')

            file.write('}\n')

    # ---------------------------------------------------------------------
    def writeMeshDefinition(self):

        with open (self.fileName,'a') as file:
            file.write('\nMesh\n')
            file.write('{\n')
            
            file.write('   -- General mesh attributes\n')
            file.write('   id          = \'mesh\',\n')
            file.write('   typeName    = \'GemaMesh.elem\',\n')             #TODO: generalize to XFEM
            file.write('   description = \'Mesh discretization\',\n')
            file.write('\n')

            file.write('   -- Mesh dimensions\n')
            file.write(f'   coordinateDim  = {self.mesh.dim},\n')
            file.write(f'   coordinateUnit = \'{self.mesh.coordinateUnits}\',\n')
            file.write('\n')

            file.write('   -- State vars stored in this mesh (per node)\n')
            file.write('   stateVars = {')
            for var in self.stateVariables:
                file.write(f' \'{var}\',')
            file.write('},\n')
            file.write('\n')   

            file.write('   -- Mesh node coordinates\n')
            file.write('   nodeData = meshInfo.nodes,\n')
            file.write('\n')  

            file.write('   -- Element data\n')  
            if self.mesh.dim == 2:
                file.write('   cellProperties = {\'MatProp\'},\n')
            elif self.mesh.dim == 3:
                file.write('   cellProperties = {\'MatProp\',\'SecProp\'},\n')  
            file.write('   cellData = mesh_elements,\n')
            file.write('\n')

            file.write('   -- Node sets\n')   
            file.write('   nodeSetData = {\n')
            for dimPhysicalGroup,physicalGroupTag in self.mesh.nodeSetData:
                # Get the name of the data set
                nodeSetName = self.mesh.gmsh.model.getPhysicalName(dimPhysicalGroup, physicalGroupTag)
                file.write(f'      {{id = \'{nodeSetName}\', nodeList = meshInfo.nodeList_{nodeSetName}}},\n')
            file.write('     },\n')
            file.write('\n')

            file.write('   -- IntegrationRules\n')  
            file.write('   elementRules = {\n')
            elemTypes = self.mesh.getElementTypes()
            file.write('      {')
            for gmshElemType in elemTypes:
                gemaElementType = gmsh2GeMA_elementTypes[gmshElemType]
                file.write(f' {gemaElementType} = {gema_elementIntegrationRules[gemaElementType]},')
            file.write('}\n')
            file.write('   },\n') 
            file.write('}\n') 


    # ---------------------------------------------------------------------
    def writeMaterialProperties(self):

        # Get the material parameters of all materials present in the model
        parameters = self.getMaterialParameters()

        # Open the file to write the material properties
        with open (self.fileName,'a') as file:
            file.write('  properties  = {\n')
            for param in parameters:
                matprop = '    {id= ' + param + ', description = \'' + self.matParametersDescriptions[param] + '\',  unit = \'' + self.matParametersUnits[param] + '\'},\n'
                file.write(matprop)
            file.write("  },\n")

    # --------------------------------------------------------------------- 
    def writeMaterialValues(self):

        # Open the file to write the material properties
        with open (self.fileName,'a') as file:
            file.write('  values  = {\n')
            for mat in self.materials:
                file.write("     {")
                for param in mat.parametersId:
                    file.write(f"    {param} = {mat.data[param]:.8e},")
                file.write("  },\n")
            file.write("  }\n")
            file.write("}\n")

    # ---------------------------------------------------------------------
    def writeMaterialHeader(self):

        with open (self.fileName,'a') as file:
            file.write('-------------------------------------------------------------\n')
            file.write('--  Cell properties\n')
            file.write('-------------------------------------------------------------\n')
            file.write('PropertySet\n')
            file.write('{\n')
            file.write('  id= \'MatProp\',\n')
            file.write('  typeName  = \'GemaPropertySet\',\n')
            file.write('  description = \'Material properties\',\n')

    